package pl.edu.wat.algorithm;

import pl.edu.wat.Data;
import pl.edu.wat.Metrics;
import pl.edu.wat.algorithm.model.Set;
import pl.edu.wat.algorithm.model.Universe;
import pl.edu.wat.utils.Configuration;
import pl.edu.wat.utils.Generator;

import java.util.List;

public class AlgorithmManager {

    private SetCoverAlgorithm exactAlgorithm;
    private SetCoverAlgorithm greedyAlgorithm;

    private Long memory;

    public AlgorithmManager(Data data) {
        System.gc();
        memory = Metrics.getUsedMemory();
        if (Data.RANDOM.equals(data)) {
            initRandom();
        } else if (Data.FILE.equals(data)) {
            initFromFile();
        }
        memory = Metrics.getUsedMemory() - memory;
        System.out.println(String.format("Loaded %s bytes of initial data generated by %s", memory, data.getType()));
    }

    public void run() {
        greedyAlgorithm.run();
        exactAlgorithm.run();
    }

    private void initRandom() {
        Generator generator = Generator.generate();
        Universe universe = Universe.create(generator.getUniverse());
        List<Set> sets = Set.create(generator.getSets());
        initAlgorithms(universe, sets);
    }

    private void initFromFile() {
        Configuration configuration = Configuration.load();
        Universe universe = Universe.create(configuration.getUniverse());
        List<Set> sets = Set.create(configuration.getSets());
        initAlgorithms(universe, sets);
    }

    private void initAlgorithms(Universe universe, List<Set> sets) {
        exactAlgorithm = new ExactAlgorithm(universe, sets);
        greedyAlgorithm = new GreedyAlgorithm(universe, sets);
    }
}
